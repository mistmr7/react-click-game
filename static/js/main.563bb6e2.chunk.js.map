{"version":3,"sources":["components/Card/Card.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","click","alt","name","id","src","img","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Score","state","characters","marioKart","score","highScore","scores","chosen","welcomeMessage","imageClickedHandler","event","_this","indexOf","parseInt","target","setState","push","max","apply","characterChangeHandler","coco","_this2","this","value","map","character","components_Card_Card","key","Component","App","components_Score_Score","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.563bb6e2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n// import coco from './coco.json'\r\n// import marioKart from './marioKart.json'\r\n\r\nconst Card = (props) => {\r\n  return (\r\n  <div className=\"card justify-content-center align-middle\" onClick={props.click}>\r\n    <div className=\"img-container vertical-center\">\r\n      <img className=\"characterImage\" alt={props.name} id={props.id} src={props.img}/>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Card;","import React, { Component } from 'react'\r\nimport './Score.css'\r\nimport Card from '../Card/Card'\r\nimport coco from '../../coco.json'\r\nimport marioKart from '../../../src/marioKart.json'\r\n\r\n// Function used to shuffle all of the cards\r\nconst shuffle = (array) => {\r\n  let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n  \r\n  return array; \r\n}\r\n\r\nclass Score extends Component {\r\n  state = {\r\n    characters: marioKart,\r\n    score: 0,\r\n    highScore: 0,\r\n    scores:[],\r\n    chosen:[],\r\n    welcomeMessage: \"Click on any player to begin. Clicking any character more than once will result in a loss. Good luck!\"\r\n  }\r\n\r\n    \r\n  imageClickedHandler = (event) => {\r\n    // check to see if the card has been chosen, if so, add 1 to the score\r\n    if (this.state.chosen.indexOf(parseInt(event.target.id)) === -1){\r\n      this.setState( (state) => { return {\r\n        score: state.score + 1    \r\n      }})\r\n      \r\n      // push the new target id into the selected array\r\n      this.state.chosen.push(parseInt(event.target.id))\r\n\r\n      // push the score to the scores array\r\n      this.state.scores.push(this.state.score + 1)\r\n    \r\n        \r\n        this.setState({\r\n          highScore: Math.max.apply(null, this.state.scores),\r\n          scores: this.state.scores,\r\n          chosen: this.state.chosen, \r\n          characters: shuffle(this.state.characters),\r\n          welcomeMessage: \"Nice choice!\"           \r\n        })    \r\n\r\n    } else {\r\n      let score = 0;\r\n      return this.setState({\r\n        score: score,\r\n        highScore:this.state.highScore,\r\n        scores: this.state.scores,\r\n        chosen:[],\r\n        welcomeMessage: \"Sorry, that item has already been clicked! Play again to see if you can set a new high Score!\"\r\n      })\r\n    }\r\n  }\r\n\r\n  characterChangeHandler = (event) => {\r\n    if (this.state.characters === marioKart) {\r\n      this.setState({\r\n        characters: coco,\r\n        score: 0\r\n      })\r\n    } else {\r\n      this.setState({\r\n        characters: marioKart,\r\n        score: 0\r\n      })\r\n    }\r\n  }\r\n\r\n \r\n  \r\n  render() {\r\n  return (\r\n    <div className=\"container\">\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <span className=\"navbar-brand mb-0 h1\">React-Clicky-Game</span>\r\n        <button className=\"btn btn-outline-warning\" onClick={this.characterChangeHandler}>Change Images</button>\r\n        <ul className=\"score\">\r\n          <li value={this.state.score}>Score: {this.state.score}</li>\r\n          <li>High Score: {this.state.highScore}</li>\r\n        </ul>\r\n      </nav>\r\n      <p className=\"text-center\">{this.state.welcomeMessage}</p>\r\n      <div className=\"row justify-content-center\">\r\n        {this.state.characters.map(character => (\r\n          <Card \r\n            id={character.id}\r\n            key={character.id}\r\n            img={character.img}\r\n            click={this.imageClickedHandler}/>\r\n        ))}         \r\n      </div>\r\n    </div>\r\n        \r\n  )\r\n}\r\n}\r\n\r\nexport default Score;","import React, { Component } from 'react';\n// import Card from './components/Card/Card.js';\n// import marioKart from './marioKart.json';\nimport Score from './components/Score/Score'\n\n// import _ from 'lodash';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (      \n        <Score/>  \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}